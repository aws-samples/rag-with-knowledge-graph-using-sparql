AWSTemplateFormatVersion: "2010-09-09"
Description: Sets up an Amazon Neptune cluster, a KMS-encrypted SageMaker notebook instance, and an EC2 instance with necessary permissions and configurations.

Parameters:
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: The ID of the VPC where the Neptune cluster and notebook will be deployed.

  SubnetId1:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the first subnet where the Neptune instance will be deployed.

  SubnetId2:
    Type: AWS::EC2::Subnet::Id
    Description: The ID of the second subnet where the Neptune instance will be deployed.

  S3Endpoint:
    Type: String
    Description: "DNS name of the S3 VPC Endpoint"

  S3BucketName:
    Type: String
    Description: "Name of the S3 bucket containing the TTL file"

  TTLFileKey:
    Type: String
    Default: imdb.ttl.gz
    Description: "S3 key (path) of the TTL file within the bucket"

  NeptunePort:
    Type: Number
    Description: The port number for the Neptune instance.

  NotebookInstanceType:
    Type: String
    Default: ml.m5d.large
    Description: The instance type for the Neptune notebook.

  AllowedIP:
    Type: String
    Description: The IP address range allowed to access the Neptune instance (in CIDR notation).

  NeptuneNotebookName:
    Type: String
    Description: The name of the Neptune notebook.

  NeptuneClusterAuthMode:
    Type: String
    Default: DEFAULT
    AllowedValues:
      - DEFAULT
      - IAM
    Description: "The IAM authentication mode on the specified Neptune cluster."

Resources:
  NeptuneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Neptune instance
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref NeptunePort
          ToPort: !Ref NeptunePort
          CidrIp: !Ref AllowedIP
          Description: Allow tcp access from the specified IP address.

  NeptuneSubnetGroup:
    Type: AWS::Neptune::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Neptune instance
      SubnetIds:
        - !Ref SubnetId1
        - !Ref SubnetId2

  NeptuneRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: rds.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: S3AccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"
                Condition:
                  StringEquals:
                    "aws:SourceVpce": !Ref S3Endpoint

  NeptuneCluster:
    Type: AWS::Neptune::DBCluster
    Properties:
      AssociatedRoles:
        - RoleArn: !GetAtt NeptuneRole.Arn
      DBSubnetGroupName: !Ref NeptuneSubnetGroup
      VpcSecurityGroupIds:
        - !Ref NeptuneSecurityGroup
      Port: !Ref NeptunePort
      ServerlessScalingConfiguration:
        MinCapacity: 1.0
        MaxCapacity: 128.0
      EnableCloudwatchLogsExports:
        - audit

  NeptuneInstance:
    Type: AWS::Neptune::DBInstance
    Properties:
      DBClusterIdentifier: !Ref NeptuneCluster
      DBInstanceClass: db.serverless

  ## Notebook setup
  SageMakerNotebookInstanceSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for SageMaker notebook instance
      VpcId: !Ref VpcId
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 8182
          ToPort: 8182
          DestinationSecurityGroupId: !Ref NeptuneSecurityGroup
          Description: Allow tcp egress to Neptune instance

  NotebookKMSKey:
    Type: AWS::KMS::Key
    Properties:
      Description: KMS key for encrypting SageMaker notebook instance
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
              AWS: !Sub 'arn:aws:iam::${AWS::AccountId}:root'
            Action: kms:*
            Resource: '*'
          - Sid: Allow use of the key
            Effect: Allow
            Principal:
              AWS: !GetAtt NeptuneNotebookRole.Arn
            Action:
              - kms:Encrypt
              - kms:Decrypt
              - kms:ReEncrypt*
              - kms:GenerateDataKey*
              - kms:DescribeKey
            Resource: '*'

  NeptuneNotebookInstance:
    Type: AWS::SageMaker::NotebookInstance
    Properties:
      NotebookInstanceName: !Join
        - ""
        - - "aws-neptune-"
          - !Ref NeptuneNotebookName
      InstanceType:
        Ref: NotebookInstanceType
      SubnetId:
        Ref: SubnetId1
      SecurityGroupIds:
        - !Ref SageMakerNotebookInstanceSG
      RoleArn: !GetAtt NeptuneNotebookRole.Arn
      LifecycleConfigName:
        Fn::GetAtt:
          - NeptuneNotebookInstanceLifecycleConfig
          - NotebookInstanceLifecycleConfigName
      KmsKeyId: !Ref NotebookKMSKey
      Tags:
        - Key: "aws-neptune-cluster-id"
          Value: !Ref NeptuneCluster
        - Key: "aws-neptune-resource-id"
          Value: !GetAtt NeptuneCluster.ClusterResourceId

  NeptuneNotebookInstanceLifecycleConfig:
    Type: AWS::SageMaker::NotebookInstanceLifecycleConfig
    Properties:
      OnStart:
        - Content:
            Fn::Base64:
              Fn::Join:
                - ""
                - - "#!/bin/bash\n"
                  - sudo -u ec2-user -i << 'EOF'
                  - "\n"
                  - echo 'export GRAPH_NOTEBOOK_AUTH_MODE=
                  - !Ref NeptuneClusterAuthMode
                  - "' >> ~/.bashrc\n"
                  - echo 'export GRAPH_NOTEBOOK_HOST=
                  - !GetAtt NeptuneCluster.Endpoint
                  - "' >> ~/.bashrc\n"
                  - echo 'export GRAPH_NOTEBOOK_PORT=
                  - !Ref NeptunePort
                  - "' >> ~/.bashrc\n"
                  - echo 'export NEPTUNE_LOAD_FROM_S3_ROLE_ARN=
                  - "' >> ~/.bashrc\n"
                  - echo 'export AWS_REGION=
                  - !Ref AWS::Region
                  - "' >> ~/.bashrc\n"
                  - aws s3 cp s3://aws-neptune-notebook/graph_notebook.tar.gz /tmp/graph_notebook.tar.gz
                  - "\n"
                  - aws s3 cp s3://
                  - !Ref S3BucketName
                  - /
                  - !Ref TTLFileKey
                  - " /home/ec2-user/SageMaker/"
                  - "\n"
                  - aws s3 cp s3://
                  - !Ref S3BucketName
                  - /rag-with-knowledge-graph-final.ipynb /home/ec2-user/SageMaker/
                  - "\n"
                  - rm -rf /tmp/graph_notebook
                  - "\n"
                  - tar -zxvf /tmp/graph_notebook.tar.gz -C /tmp
                  - "\n"
                  - /tmp/graph_notebook/install.sh
                  - "\n"
                  - EOF

  NeptuneNotebookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - sagemaker.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Policies:
        - PolicyName: NeptuneNotebookPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "neptune-db:*"
                Resource:
                  - "*"
              - Effect: Allow
                Action:
                  - "bedrock:*"
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - !Sub "arn:aws:s3:::${S3BucketName}"
                  - !Sub "arn:aws:s3:::${S3BucketName}/*"
                Condition:
                  StringEquals:
                    "aws:SourceVpce": !Ref S3Endpoint
              - Effect: Allow
                Action:
                  - s3:Get*
                  - s3:List*
                Resource:
                  - "arn:aws:s3:::aws-neptune-notebook"
                  - "arn:aws:s3:::aws-neptune-notebook/*"
              - Effect: Allow
                Action:
                  - logs:*
                Resource:
                  - "*"

Outputs:
  NeptuneEndpoint:
    Description: The endpoint for the Neptune cluster
    Value: !GetAtt NeptuneCluster.Endpoint
  NeptuneClusterId:
    Value: !Ref NeptuneCluster
  NeptuneClusterResourceId:
    Value: !GetAtt NeptuneCluster.ClusterResourceId
  NeptuneLoadCommand:
    Description: The load command for the Neptune cluster
    Value: !Sub "%load -s s3://${S3BucketName}/${TTLFileKey} -f turtle -p OVERSUBSCRIBE -l ${NeptuneRole.Arn} --store-to loadres --run"
  NotebookKMSKeyId:
    Description: The ID of the KMS key used to encrypt the SageMaker notebook
    Value: !Ref NotebookKMSKey
  NotebookKMSKeyArn:
    Description: The ARN of the KMS key used to encrypt the SageMaker notebook
    Value: !GetAtt NotebookKMSKey.Arn